import { state } from './seo-tool-state.js';
import { initSyntaxHighlighting } from './syntax-highlight.js';
import { setEditorValue, getEditorValue } from './hieditor.js';
import { generateSitemapData } from './seo.js?v=1';
import { fetchConfigWithYamlFallback } from './yaml.js';
import { getContentRootFrom, loadSiteConfigFlex } from './seo-tool-config.js';
import { getCurrentLang, DEFAULT_LANG, withLangParam } from './i18n.js';
import { parseFrontMatter, stripFrontMatter, stripMarkdownToText } from './content.js';
import { extractSEOFromMarkdown } from './seo.js?v=1';

function t(kind, msg){ try { window.showToast && window.showToast(kind, msg); } catch (_) {} }

// Formatters
function formatXML(xml) {
  try {
    const P = />(\s*)</g;
    xml = xml.replace(P, '>$1\n<');
    let pad = 0; let result = '';
    xml.split('\n').forEach(line => {
      if (!line.trim()) return;
      if (line.match(/^<\//)) pad = Math.max(pad - 1, 0);
      result += '  '.repeat(pad) + line.trim() + '\n';
      if (line.match(/^<[^!?][^>]*[^\/]>/) && !line.match(/<.*<\/.*>/)) pad += 1;
    });
    return result.trim();
  } catch (_) { return xml; }
}
function formatHTMLFragment(html) { return formatXML(html); }

// Escapers
function escapeHTML(str) {
  return String(str || '').replace(/[&<>"']/g, function(char) {
    switch (char) {
      case '&': return '&amp;';
      case '<': return '&lt;';
      case '>': return '&gt;';
      case '"': return '&quot;';
      case "'": return '&#39;';
      default: return char;
    }
  });
}
function escapeXML(str) {
  return String(str || '').replace(/[<>&'\"]/g, function(char) {
    switch (char) {
      case '<': return '&lt;';
      case '>': return '&gt;';
      case '&': return '&amp;';
      case "'": return '&apos;';
      case '"': return '&quot;';
      default: return char;
    }
  });
}

// Generators
function generateSitemapXML(urls) {
  let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
  xml += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n';
  urls.forEach(url => {
    xml += '  <url>\n';
    xml += `    <loc>${escapeXML(url.loc)}</loc>\n`;
    xml += `    <lastmod>${url.lastmod}</lastmod>\n`;
    xml += `    <changefreq>${url.changefreq}</changefreq>\n`;
    xml += `    <priority>${url.priority}</priority>\n`;
    xml += '  </url>\n';
  });
  xml += '</urlset>';
  return xml;
}

function generateRobotsTxt(siteConfig) {
  const baseUrl = window.location.origin + '/';
  const cr = getContentRootFrom(siteConfig);
  let robots = `User-agent: *\n`;
  robots += `Allow: /\n\n`;
  robots += `# Sitemap\n`;
  robots += `Sitemap: ${baseUrl}sitemap.xml\n\n`;
  robots += `# Allow crawling of main content\n`;
  robots += `Allow: /${cr}/\n`;
  robots += `Allow: /assets/\n\n`;
  robots += `# Disallow admin or internal directories\n`;
  robots += `Disallow: /admin/\n`;
  robots += `Disallow: /.git/\n`;
  robots += `Disallow: /node_modules/\n`;
  robots += `Disallow: /.env\n`;
  robots += `Disallow: /package.json\n`;
  robots += `Disallow: /package-lock.json\n\n`;
  robots += `# SEO tools (allow but not priority)\n`;
  robots += `Allow: /seo-generator.html\n`;
  robots += `Allow: /sitemap-generator.html\n\n`;
  robots += `# Crawl delay (be nice to servers)\n`;
  robots += `Crawl-delay: 1\n\n`;
  robots += `# Generated by NanoSite SEO Generator\n`;
  robots += `# ${new Date().toISOString()}\n`;
  return robots;
}

function generateMetaTagsHTML(siteConfig) {
  const baseUrl = window.location.origin + '/';
  const getLocalizedValue = (val, fallback = '') => {
    if (!val) return fallback;
    if (typeof val === 'string') return val;
    return val.default || fallback;
  };
  const siteTitle = getLocalizedValue(siteConfig.siteTitle, 'NanoSite');
  const siteDescription = getLocalizedValue(siteConfig.siteDescription, 'A pure front-end blog template');
  const siteKeywords = getLocalizedValue(siteConfig.siteKeywords, 'blog, static site, markdown');
  const avatar = siteConfig.avatar || 'assets/avatar.png';
  const fullAvatarUrl = avatar.startsWith('http') ? avatar : baseUrl + avatar;
  let html = `  <!-- Primary SEO Meta Tags -->\n`;
  html += `  <title>${escapeHTML(siteTitle)}</title>\n`;
  html += `  <meta name="title" content="${escapeHTML(siteTitle)}">\n`;
  html += `  <meta name="description" content="${escapeHTML(siteDescription)}">\n`;
  html += `  <meta name="keywords" content="${escapeHTML(siteKeywords)}">\n`;
  html += `  <meta name="author" content="${escapeHTML(siteTitle)}">\n`;
  html += `  <meta name="robots" content="index, follow">\n`;
  html += `  <link rel="canonical" href="${baseUrl}">\n`;
  html += `  \n`;
  html += `  <!-- Open Graph / Facebook -->\n`;
  html += `  <meta property="og:type" content="website">\n`;
  html += `  <meta property="og:url" content="${baseUrl}">\n`;
  html += `  <meta property="og:title" content="${escapeHTML(siteTitle)}">\n`;
  html += `  <meta property="og:description" content="${escapeHTML(siteDescription)}">\n`;
  html += `  <meta property="og:image" content="${fullAvatarUrl}">\n`;
  html += `  <meta property="og:logo" content="${fullAvatarUrl}">\n`;
  html += `  \n`;
  html += `  <!-- Twitter -->\n`;
  html += `  <meta property="twitter:card" content="summary_large_image">\n`;
  html += `  <meta property="twitter:url" content="${baseUrl}">\n`;
  html += `  <meta property="twitter:title" content="${escapeHTML(siteTitle)}">\n`;
  html += `  <meta property="twitter:description" content="${escapeHTML(siteDescription)}">\n`;
  html += `  <meta property="twitter:image" content="${fullAvatarUrl}">\n`;
  html += `  \n`;
  html += `  <!-- Initial meta tags - will be updated by dynamic SEO system -->\n`;
  html += `  <meta name="theme-color" content="#1a1a1a">\n`;
  html += `  <meta name="msapplication-TileColor" content="#1a1a1a">\n`;
  html += `  <link rel="icon" type="image/png" href="${avatar}">`;
  return html;
}

// ---- Human-friendly previews and Source overlay ----
function __escHtml(s){
  return String(s ?? '').replace(/[&<>"']/g, c => ({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#039;' }[c]));
}

function openSourceOverlay(title, code, language = 'plain'){
  try {
    const overlay = document.getElementById('tab-help-overlay');
    const titleEl = document.getElementById('tab-help-title');
    const bodyEl = document.getElementById('tab-help-body');
    const closeBtn = document.getElementById('tab-help-close');
    if (!overlay || !titleEl || !bodyEl || !closeBtn) return;
    const raw = String(code || '');
    const langClass = `language-${(language||'plain').toLowerCase()}`;
    const pre = `<div class=\"hi-editor\"><div class=\"code-scroll\"><div class=\"code-gutter\"></div><pre class=\"hi-pre\"><code class=\"${langClass}\">${__escHtml(raw)}</code></pre></div></div>`;
    const html = `<p style=\"margin:.25rem 0 .5rem;color:#57606a\">Raw source</p>${pre}`;
    const scrollY = window.scrollY || window.pageYOffset || 0;
    document.body.style.position = 'fixed';
    document.body.style.top = `-${scrollY}px`;
    document.body.style.left = '0';
    document.body.style.right = '0';
    document.body.style.width = '100%';
    titleEl.textContent = title;
    bodyEl.innerHTML = html;
    overlay.classList.add('open');
    overlay.setAttribute('aria-hidden','false');
    const close = () => {
      overlay.classList.remove('open');
      overlay.setAttribute('aria-hidden','true');
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.left = '';
      document.body.style.right = '';
      document.body.style.width = '';
      window.scrollTo(0, scrollY);
      try { closeBtn.removeEventListener('click', close); } catch(_){}
      try { overlay.removeEventListener('click', onOverlay); } catch(_){}
    };
    const onOverlay = (e) => { if (e && e.target === overlay) close(); };
    closeBtn.addEventListener('click', close);
    overlay.addEventListener('click', onOverlay);
    overlay.querySelector('.gh-modal')?.addEventListener('click', (e)=> e.stopPropagation());
    try { initSyntaxHighlighting && initSyntaxHighlighting(); } catch(_){}
  } catch (_) {}
}

function setHTML(id, html){ const el = document.getElementById(id); if (el) el.innerHTML = html; }
// expose overlay + editor getter globally for inline anchors
try { window.openSourceOverlay = openSourceOverlay; } catch (_) {}
try { window.__getEditorVal = getEditorValue; } catch (_) {}
try {
  window.__openSrc = function(textareaId, lang, title){
    try {
      const content = (window.__getEditorVal && window.__getEditorVal(textareaId)) || (document.getElementById(textareaId) || {}).value || '';
      openSourceOverlay(title || 'Source', content || '', lang || 'plain');
    } catch (_) {}
    return false;
  };
} catch (_) {}

async function renderSitemapPreview(urls = []){
  const baseUrl = window.location.origin + '/';
  const total = Array.isArray(urls) ? urls.length : 0;
  const lastmods = urls.map(u => u.lastmod).filter(Boolean).sort();
  const latest = lastmods.length ? lastmods[lastmods.length - 1] : '—';
  const cfg = (window.__seoToolState && window.__seoToolState.currentSiteConfig) || {};
  const cr = getContentRootFrom(cfg);

  const posts = (window.__seoToolState && window.__seoToolState.currentPostsData) || {};
  const tabs  = (window.__seoToolState && window.__seoToolState.currentTabsData) || {};

  const langPref = (() => {
    const cur = getCurrentLang ? getCurrentLang() : DEFAULT_LANG;
    return [cur, DEFAULT_LANG, 'en', 'zh', 'ja', 'default'];
  })();

  const slugify = (s) => String(s || '').toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '');
  const titleFromMd = (md) => {
    try {
      const { frontMatter, content } = parseFrontMatter(md || '');
      if (frontMatter && frontMatter.title) return String(frontMatter.title).trim();
      const m = String(content || '').match(/^#\s+(.+)/m);
      return m ? m[1].trim() : '';
    } catch(_) { return ''; }
  };
  async function fetchMdWithFallback(loc) {
    const candidates = [];
    const normLoc = String(loc || '').replace(/^\/+/, '');
    const base = cr.replace(/\/+$/,'');
    // contentRoot-based
    candidates.push(`${base}/${normLoc}`);
    candidates.push(`/${normLoc}`);
    candidates.push(normLoc);
    // Try resourceURL from site config if present
    try {
      const siteCfg = (window.__seoToolState && window.__seoToolState.currentSiteConfig) || {};
      const res = String(siteCfg.resourceURL || '').trim();
      if (res) {
        const u = new URL(normLoc.replace(/^\/+/, ''), res.endsWith('/') ? res : (res + '/'));
        candidates.unshift(u.toString());
      }
    } catch(_) {}
    for (const u of candidates) {
      try { const r = await fetch(u); if (r.ok) return await r.text(); } catch(_) {}
    }
    return '';
  }
  async function readPostDetails(loc) {
    try {
      const md = await fetchMdWithFallback(loc);
      const title = titleFromMd(md);
      return { title, md };
    } catch(_) { return { title: '', md: '' }; }
  }
  function langsOf(meta) {
    const langs = [];
    for (const [k, v] of Object.entries(meta || {})) {
      if (typeof v === 'string') langs.push(k);
      else if (v && typeof v === 'object' && (v.location || v.title)) langs.push(k);
    }
    return langs;
  }
  function pick(meta) {
    for (const l of langPref) {
      const v = meta && meta[l];
      if (typeof v === 'string') return { lang: l, location: v, title: '' };
      if (v && typeof v === 'object' && v.location) return { lang: l, location: v.location, title: v.title || '' };
    }
    // legacy flat
    if (meta && meta.location) return { lang: langPref[0], location: meta.location, title: meta.title || '' };
    return { lang: langPref[0], location: '', title: '' };
  }

  // Build post entries with titles
  const postItems = await (async () => {
    const entries = [];
    for (const [key, meta] of Object.entries(posts)) {
      const langs = langsOf(meta);
      const primary = pick(meta);
      let title = primary.title;
      let mdCache = '';
      if (!title && primary.location) { const det = await readPostDetails(primary.location); title = det.title; mdCache = det.md; }
      // Pull SEO bits (date/tags) and compute word/char count
      let dateStr = '';
      let tags = [];
      let wordCount = 0;
      try {
        const md = mdCache || (primary.location ? (await fetchMdWithFallback(primary.location)) : '');
        if (md) {
          // Front-matter snapshot
          let fm = {};
          try { fm = parseFrontMatter(md).frontMatter || {}; console.debug('[SEO-Preview] FM', primary.location, fm); } catch(_) {}
          // 1) Try SEO extraction with a safe site avatar to avoid fallback image path
          try {
            const chosenMeta = (() => {
              try {
                const m = meta || {};
                const perLang = m && m[primary.lang];
                if (perLang && typeof perLang === 'object') return { ...perLang, location: primary.location };
                if (m && typeof m === 'object') return { ...m, location: primary.location };
              } catch(_) {}
              return { location: primary.location };
            })();
            const siteCfgBase = (window.__seoToolState && window.__seoToolState.currentSiteConfig) || {};
            const siteCfg = { ...siteCfgBase };
            if (!siteCfg.avatar) siteCfg.avatar = 'assets/avatar.jpeg';
            const seo = extractSEOFromMarkdown(md, chosenMeta, siteCfg) || {};
            if (seo.publishedTime) { try { dateStr = String(seo.publishedTime).slice(0,10); } catch(_) {} }
            if (Array.isArray(seo.tags)) tags = seo.tags;
          } catch (e) {
            console.warn('[SEO-Preview] SEO extract failed', primary.location, e);
          }
          // 2) Fallbacks direct from front-matter if missing
          try {
            if (!dateStr && fm && fm.date) dateStr = String(fm.date).trim();
            if ((!tags || !Array.isArray(tags) || tags.length === 0) && fm) {
              if (Array.isArray(fm.tags)) tags = fm.tags;
              else if (typeof fm.tags === 'string' && fm.tags.trim()) tags = [fm.tags.trim()];
            }
            console.debug('[SEO-Preview] RES', primary.location, { dateStr, tags });
          } catch(_) {}
          // 2) Compute words — always attempt
          try {
            const plain = stripMarkdownToText(stripFrontMatter(md));
            const basic = plain ? plain.split(/\s+/).filter(Boolean).length : 0;
            // Fallback for CJK: if few or zero words, count visible non-space chars
            if (basic > 1) { wordCount = basic; }
            else {
              const chars = (plain || '').replace(/\s+/g, '').length;
              wordCount = chars;
            }
          } catch(_) {}
        }
      } catch(_) {}
      const perLangLinks = langs.map(l => {
        const v = meta[l];
        const loc = (typeof v === 'string') ? v : (v && v.location) || '';
        const q = loc ? `/index.html?id=${encodeURIComponent(loc)}` : '';
        return { lang: l, href: q ? withLangParam(q) : '' };
      }).filter(x => x.href);
      entries.push({
        type: 'post', key, title: title || key, langs, multi: langs.length > 1,
        href: primary.location ? withLangParam(`/index.html?id=${encodeURIComponent(primary.location)}`) : '#',
        location: primary.location,
        perLangLinks,
        dateStr,
        tags,
        wordCount
      });
    }
    return entries.sort((a,b)=> a.key.localeCompare(b.key));
  })();

  // Build tab entries
  const tabItems = (() => {
    const entries = [];
    for (const [key, meta] of Object.entries(tabs)) {
      const langs = langsOf(meta);
      const primary = pick(meta);
      const slug = slugify(key);
      const title = primary.title || key;
      const perLangLinks = langs.map(l => ({ lang: l, href: withLangParam(`/index.html?tab=${encodeURIComponent(slug)}&lang=${encodeURIComponent(l)}`) }));
      entries.push({ type: 'tab', key, title, langs, multi: langs.length > 1, href: withLangParam(`/index.html?tab=${encodeURIComponent(slug)}`) });
    }
    return entries.sort((a,b)=> a.key.localeCompare(b.key));
  })();

  const postsList = postItems.map(it => (
    `<li>
       <a href="${__escHtml(it.href)}">${__escHtml(it.title)}</a>
       <div class="dim">${it.location ? `<code>${__escHtml(it.location)}</code>` : ''}</div>
       <div class="config-value" style="margin-top:.25rem;">
         <span class="badge ${it.langs.length>1?'ok':'warn'}">${it.langs.length>1 ? 'Multilingual' : 'Single language'}</span>
         <span class="dim" style="margin-left:.5rem;">Languages:</span>
         ${it.perLangLinks.map(x => `<span class="chip"><a href="${__escHtml(x.href)}" style="text-decoration:none;color:inherit;">${__escHtml(x.lang)}</a></span>`).join('')}
       </div>
       <div class="config-value" style="margin-top:.25rem;">
         ${it.dateStr ? `<span class="mini-badge">Date: ${__escHtml(it.dateStr)}</span>` : ''}
         <span class="mini-badge">Words: ${it.wordCount || 0}</span>
         ${Array.isArray(it.tags) && it.tags.length ? `<span class="dim" style="margin-left:.5rem;">Tags:</span> ${it.tags.map(t => `<span class=\"chip\">${__escHtml(t)}</span>`).join('')}` : ''}
       </div>
     </li>`
  )).join('');

  const tabsList = tabItems.map(it => (
    `<li>
       <a href="${__escHtml(it.href)}">${__escHtml(it.title)}</a>
       <div class="config-value" style="margin-top:.25rem;">
         <span class="badge ok">Static Page</span>
         <span class="badge ${it.langs.length>1?'ok':'warn'}">${it.langs.length>1 ? 'Multilingual' : 'Single language'}</span>
         <span class="dim" style="margin-left:.5rem;">Languages:</span>
         ${it.langs.map(l => `<span class="chip"><a href="${__escHtml(withLangParam(`/index.html?tab=${encodeURIComponent(slugify(it.key))}&lang=${encodeURIComponent(l)}`))}" style="text-decoration:none;color:inherit;">${__escHtml(l)}</a></span>`).join('')}
       </div>
     </li>`
  )).join('');

  const body = [
    '<div class="config-group">',
    '  <div class="config-group-title">🧭 Overview</div>',
    '  <div class="section-body">',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Site Root</span></span><div class="config-value"><code>', __escHtml(baseUrl), '</code></div></div>',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">URL Count</span></span><div class="config-value"><span class="badge ok">', String(total), ' URLs</span></div></div>',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Last Modified</span></span><div class="config-value">', __escHtml(latest), '</div></div>',
    '  </div>',
    '</div>',
    '<div class="config-group">',
    '  <div class="config-group-title">🏠 Home</div>',
    '  <div class="section-body">',
    `    <ul class="config-list"><li><a href="${__escHtml(withLangParam('/index.html'))}">/index.html</a></li></ul>`,
    '  </div>',
    '</div>',
    '<div class="config-group">',
    '  <div class="config-group-title">📝 Posts</div>',
    '  <div class="section-body">',
    postsList ? `<ul class="config-list">${postsList}</ul>` : '<div class="dim" style="padding:.25rem 0 .5rem;">No posts</div>',
    '  </div>',
    '</div>',
    '<div class="config-group">',
    '  <div class="config-group-title">📁 Tabs</div>',
    '  <div class="section-body">',
    tabsList ? `<ul class="config-list">${tabsList}</ul>` : '<div class="dim" style="padding:.25rem 0 .5rem;">No tabs</div>',
    '  </div>',
    '</div>'
  ].join('');

  const html = [
    '<div class="config-header">',
    '  <div class="config-header-left"><h3>Sitemap</h3></div>',
    '  <div class="status-inline"><p class="success">✓ Generated</p></div>',
    '</div>',
    body
  ].join('');
  setHTML('sitemapPreview', html);
}

function renderRobotsPreview(text = ''){
  const lines = String(text || '').split(/\r?\n/).map(s => s.trim()).filter(Boolean);
  const items = lines.filter(l => !l.startsWith('#'));
  const getVals = (prefix) => items.filter(l => l.toLowerCase().startsWith(prefix + ':')).map(l => l.split(':').slice(1).join(':').trim()).filter(Boolean);
  const userAgents = getVals('user-agent');
  const allows = getVals('allow');
  const disallows = getVals('disallow');
  const sitemaps = getVals('sitemap');
  const crawlDelay = getVals('crawl-delay')[0] || '—';
  const list = (arr) => arr.length ? arr.map(v => `<span class=\"chip\">${__escHtml(v)}</span>`).join('') : '<em class="dim">None</em>';
  const body = [
    '<div class="config-group">',
    '  <div class="config-group-title">🤖 Rules</div>',
    '  <div class="section-body">',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">User-agents</span></span><div class="config-value"><div class="chips">', list(userAgents), '</div></div></div>',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Allow</span></span><div class="config-value"><div class="chips">', list(allows), '</div></div></div>',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Disallow</span></span><div class="config-value"><div class="chips">', list(disallows), '</div></div></div>',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Crawl-delay</span></span><div class="config-value">', __escHtml(crawlDelay), '</div></div>',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Sitemap</span></span><div class="config-value">', (sitemaps[0] ? `<code>${__escHtml(sitemaps[0])}</code>` : '<em class="dim">None</em>'), '</div></div>',
    '  </div>',
    '</div>'
  ].join('');
  const html = [
    '<div class="config-header">',
    '  <div class="config-header-left"><h3>Robots.txt</h3></div>',
    '  <div class="status-inline"><p class="success">✓ Generated</p></div>',
    '</div>',
    body
  ].join('');
  setHTML('robotsPreview', html);
}

function renderMetaPreview(frag = '', cfg = {}){
  let doc;
  try { const parser = new DOMParser(); doc = parser.parseFromString(`<head>${frag}</head>`, 'text/html'); } catch(_) { doc = null; }
  const get = (sel, attr) => { try { const el = doc && doc.querySelector(sel); return el ? (attr ? el.getAttribute(attr) : (el.textContent||'')) : ''; } catch(_) { return ''; } };
  const title = get('title') || get('meta[name="title"]','content');
  const desc = get('meta[name="description"]','content');
  const keys = get('meta[name="keywords"]','content');
  const robots = get('meta[name="robots"]','content');
  const canonical = get('link[rel="canonical"]','href');
  const ogImage = get('meta[property="og:image"]','content');
  const twCard = get('meta[property="twitter:card"]','content');
  const badge = (ok) => ok ? '<span class="badge ok">OK</span>' : '<span class="badge warn">Missing</span>';
  const chips = (v) => v ? v.split(/,\s*/).map(x => `<span class=\"chip\">${__escHtml(x)}</span>`).join('') : '<em class="dim">None</em>';
  const body = [
    '<div class="config-group">',
    '  <div class="config-group-title">🏷 Basics</div>',
    '  <div class="section-body">',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Title</span></span><div class="config-value">', __escHtml(title || ''), ' ', badge(!!title), '</div></div>',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Description</span></span><div class="config-value">', __escHtml(desc || ''), ' ', badge(!!desc), '</div></div>',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Keywords</span></span><div class="config-value"><div class="chips">', chips(keys || ''), '</div></div></div>',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Robots</span></span><div class="config-value">', __escHtml(robots || 'index, follow'), '</div></div>',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Canonical</span></span><div class="config-value">', canonical ? `<code>${__escHtml(canonical)}</code>` : '<em class="dim">None</em>', '</div></div>',
    '  </div>',
    '</div>',
    '<div class="config-group">',
    '  <div class="config-group-title">🔗 Social</div>',
    '  <div class="section-body">',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Open Graph Image</span></span><div class="config-value">', ogImage ? `<code>${__escHtml(ogImage)}</code> <span class="badge ok">Set</span>` : '<em class="dim">None</em> <span class="badge warn">Missing</span>', '</div></div>',
    '    <div class="config-item"><span class="config-label"><span class="config-label-text">Twitter Card</span></span><div class="config-value">', __escHtml(twCard || 'summary_large_image'), '</div></div>',
    '  </div>',
    '</div>'
  ].join('');
  const html = [
    '<div class="config-header">',
    '  <div class="config-header-left"><h3>Meta Tags</h3></div>',
    '  <div class="status-inline"><p class="success">✓ Generated</p></div>',
    '</div>',
    body
  ].join('');
  setHTML('metaPreview', html);
}

// --- Code preview helper ---
function updateCodePreview(previewId, content, language) {
  try {
    const pre = document.getElementById(previewId);
    if (!pre) return;
    // Ensure structure contains a code element
    let code = pre.querySelector('code');
    if (!code) {
      code = document.createElement('code');
      pre.innerHTML = '';
      pre.appendChild(code);
    }
    // Assign explicit language class for highlighter
    const langClass = `language-${(language || 'plain').toLowerCase()}`;
    // Reset existing language-* classes
    Array.from(code.classList).forEach(c => { if (c.startsWith('language-')) code.classList.remove(c); });
    code.classList.add(langClass);
    // Set raw text (clears previous markup if any)
    code.textContent = content || '';
    // Apply highlighter/line numbers
    try { initSyntaxHighlighting(); } catch (_) {}
  } catch (_) {}
}

// Public API for onclick bindings
async function generateSitemap() {
  const statusEl = document.getElementById('sitemap-status');
  const outputEl = document.getElementById('sitemapOutput');
  try {
    if (statusEl) statusEl.innerHTML = '<p>Loading data...</p>';
    state.currentSiteConfig = await loadSiteConfigFlex();
    const cr = getContentRootFrom(state.currentSiteConfig);
    const [postsObj, tabsObj] = await Promise.all([
      fetchConfigWithYamlFallback([`${cr}/index.yaml`,`${cr}/index.yml`]),
      fetchConfigWithYamlFallback([`${cr}/tabs.yaml`,`${cr}/tabs.yml`])
    ]);
    state.currentPostsData = postsObj || {};
    state.currentTabsData = tabsObj || {};
    state.currentSiteConfig = await loadSiteConfigFlex();
    const urls = generateSitemapData(state.currentPostsData, state.currentTabsData, state.currentSiteConfig);
    const xml = generateSitemapXML(urls);
    if (outputEl) outputEl.value = xml;
    try { setEditorValue('sitemapOutput', xml); } catch (_) {}
    if (statusEl) statusEl.innerHTML = `<p class="success">✓ Sitemap generated successfully! Found ${urls.length} URLs.</p>`;
    try { renderSitemapPreview(urls); } catch (_) {}
    t('ok', `Sitemap generated (${urls.length} URLs)`);
    outputEl && outputEl.select();
  } catch (error) {
    console.error('Error generating sitemap:', error);
    if (statusEl) statusEl.innerHTML = `<p class="error">✗ Error generating sitemap: ${error.message}</p>`;
    t('err', `Sitemap error: ${error.message}`);
  }
}

async function generateRobots() {
  const statusEl = document.getElementById('robots-status');
  const outputEl = document.getElementById('robotsOutput');
  try {
    if (statusEl) statusEl.innerHTML = '<p>Generating robots.txt...</p>';
    if (!state.currentSiteConfig.resourceURL) state.currentSiteConfig = await loadSiteConfigFlex();
    const robotsContent = generateRobotsTxt(state.currentSiteConfig);
    if (outputEl) outputEl.value = robotsContent;
    try { setEditorValue('robotsOutput', robotsContent); } catch (_) {}
    if (statusEl) statusEl.innerHTML = '<p class="success">✓ Robots.txt generated successfully!</p>';
    try { renderRobotsPreview(robotsContent); } catch (_) {}
    outputEl && outputEl.select();
    t('ok', 'Robots.txt generated');
  } catch (error) {
    console.error('Error generating robots.txt:', error);
    if (statusEl) statusEl.innerHTML = `<p class="error">✗ Error generating robots.txt: ${error.message}</p>`;
    t('err', `Robots error: ${error.message}`);
  }
}

async function generateMetaTags() {
  const statusEl = document.getElementById('meta-status');
  const outputEl = document.getElementById('metaOutput');
  try {
    if (statusEl) statusEl.innerHTML = '<p>Generating HTML meta tags...</p>';
    if (!state.currentSiteConfig.resourceURL) state.currentSiteConfig = await loadSiteConfigFlex();
    const metaContent = generateMetaTagsHTML(state.currentSiteConfig);
    if (outputEl) outputEl.value = metaContent;
    try { setEditorValue('metaOutput', metaContent); } catch (_) {}
    if (statusEl) statusEl.innerHTML = '<p class="success">✓ HTML meta tags generated successfully!</p>';
    try { renderMetaPreview(metaContent, state.currentSiteConfig); } catch (_) {}
    outputEl && outputEl.select();
    t('ok', 'Meta tags generated');
  } catch (error) {
    console.error('Error generating meta tags:', error);
    if (statusEl) statusEl.innerHTML = `<p class="error">✗ Error generating meta tags: ${error.message}</p>`;
  }
}

function copyFromTextarea(id, okMsg){
  let val = '';
  try { val = getEditorValue(id) || ''; } catch (_) {}
  if (!val) {
    const el = document.getElementById(id);
    val = el ? (el.value || '') : '';
  }
  if (!val) return;
  if (navigator.clipboard && navigator.clipboard.writeText) {
    navigator.clipboard.writeText(val)
      .then(()=>{ t('ok', okMsg); })
      .catch(()=>{ el.select(); document.execCommand('copy'); t('ok', okMsg); });
  } else { el.select(); document.execCommand('copy'); t('ok', okMsg); }
}

function downloadFile(filename, content, mimeType) {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url; a.download = filename; document.body.appendChild(a); a.click();
  document.body.removeChild(a); URL.revokeObjectURL(url);
}

// Validators
function validateSitemap(){
  const val = getEditorValue('sitemapOutput') || (document.getElementById('sitemapOutput') || {}).value || '';
  try {
    const parser = new DOMParser();
    const doc = parser.parseFromString(val, 'application/xml');
    const err = doc.getElementsByTagName('parsererror')[0];
    if (err) { t('err', 'Invalid XML'); return false; }
    const ok = doc.documentElement && (doc.documentElement.localName === 'urlset');
    t(ok ? 'ok' : 'warn', ok ? 'XML is valid (urlset root)' : 'XML valid but unexpected root');
    return ok;
  } catch (e) { t('err', 'Validation failed'); return false; }
}
function validateRobots(){
  const val = (getEditorValue('robotsOutput') || (document.getElementById('robotsOutput') || {}).value || '').toLowerCase();
  const hasUA = val.includes('user-agent');
  const hasSM = val.includes('sitemap:');
  if (hasUA && hasSM) { t('ok', 'Robots looks OK'); return true; }
  if (!hasUA && !hasSM) { t('warn', 'Missing User-agent and Sitemap'); return false; }
  t('warn', !hasUA ? 'Missing User-agent' : 'Missing Sitemap');
  return false;
}
function validateMeta(){
  const frag = getEditorValue('metaOutput') || (document.getElementById('metaOutput') || {}).value || '';
  try {
    const parser = new DOMParser();
    const doc = parser.parseFromString(`<head>${frag}</head>`, 'text/html');
    const hasDesc = !!doc.querySelector('meta[name="description"]');
    const hasTitle = !!doc.querySelector('title');
    const ok = hasDesc && hasTitle;
    t(ok ? 'ok' : 'warn', ok ? 'Meta looks OK' : 'Missing <title> or description');
    return ok;
  } catch (_) { t('err', 'Validation failed'); return false; }
}

// Beautifiers removed (no longer used)

// Copy/Download glue
function copySitemap(){ copyFromTextarea('sitemapOutput', 'Sitemap copied'); }
function copyRobots(){ copyFromTextarea('robotsOutput', 'Robots.txt copied'); }
function copyMetaTags(){ copyFromTextarea('metaOutput', 'Meta tags copied'); }
function downloadSitemap(){ const c = (getEditorValue('sitemapOutput')) || ''; downloadFile('sitemap.xml', c, 'application/xml'); }
function downloadRobots(){ const c = (getEditorValue('robotsOutput')) || ''; downloadFile('robots.txt', c, 'text/plain'); }
function downloadMetaTags(){ const c = (getEditorValue('metaOutput')) || ''; downloadFile('meta-tags.html', c, 'text/html'); }

// Expose to window for inline attributes
window.generateSitemap = generateSitemap;
window.generateRobots = generateRobots;
window.generateMetaTags = generateMetaTags;
window.copySitemap = copySitemap;
window.copyRobots = copyRobots;
window.copyMetaTags = copyMetaTags;
window.validateSitemap = validateSitemap;
window.validateRobots = validateRobots;
window.validateMeta = validateMeta;
window.downloadSitemap = downloadSitemap;
window.downloadRobots = downloadRobots;
window.downloadMetaTags = downloadMetaTags;

// Make state discoverable to UI overlay for editor
window.__seoToolState = state;

// Expose a small helper to update preview when external edits occur
window.__seoUpdatePreview = function(id){
  try { const ta = document.getElementById(id); const val = ta ? (ta.value || '') : ''; setEditorValue(id, val); } catch (_) {}
}
